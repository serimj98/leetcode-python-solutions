class Solution:
    def minPathSum(self, grid: List[List[int]]) -> int:
        #Solution 1: O(r*c) / O(r*c)
        #creating 2D array: arr = [[0 for i in range(cols)] for j in range(rows)]
        dp = [[0 for i in range(len(grid[0]))] for j in range(len(grid))]
        for i in range(len(grid)):
            for j in range(len(grid[0])):
                if i - 1 < 0 and j - 1 >= 0: dp[i][j] = grid[i][j] + dp[i][j-1]
                elif j - 1 < 0 and i - 1 >= 0: dp[i][j] = grid[i][j] + dp[i-1][j]
                else: dp[i][j] = grid[i][j] + min(dp[i-1][j], dp[i][j-1])
        return dp[-1][-1]

        #Solution 2: O(r*c) / O(1)
        for i in range(1, len(grid)):
            grid[i][0] += grid[i-1][0]
        for j in range(1, len(grid[0])):
            grid[0][j] += grid[0][j-1]
        for g in grid:
            print(g)
        for i in range(1, len(grid)):
            for j in range(1, len(grid[0])):
                grid[i][j] += min(grid[i-1][j], grid[i][j-1])
        return grid[-1][-1]
