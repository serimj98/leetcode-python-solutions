class Solution:
  def validTree(self, n: int, edges: List[List[int]]) -> bool:
    #Solution 1 DFS: O(n) / O(n)
    #G is a tree iff G is fully connected and contains no cycles
    adj = defaultdict(list)
    for edge in edges:
      adj[edge[0]].append(edge[1])
      adj[edge[1]].append(edge[0])
    
    seen = [False] * n
    def dfs(node):
      if seen[node]: return
      seen[node] = True
      for neighbor in adj[node]:
        dfs(neighbor)
    
    dfs(0)
    if len(edges) == n - 1 and all(seen): return True
    return False
