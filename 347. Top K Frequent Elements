class Solution:
  def topKFrequent(self, nums: List[int], k: int) -> List[int]:
    #Solution 1: O(n log k) / O(n + k)
    if len(nums) == k: return nums
    numsDict = Counter(nums)
    return heapq.nlargest(k, numsDict.keys(), key=numsDict.get)
    
    #Solution 2 Bucket Sort: O(n) / O(n)
    bucket = [[] for i in range(len(nums) + 1)]
    numsDict = Counter(nums).items() #{1:3, 2:2, 3:1} -> [(1,3), (2,2), (3,1)]
    for num, freq in numsDict:
      bucket[freq].append(num) 
    sol = []
    for sublist in bucket: #flatten 2D list
      for i in sublist:
        sol.append(i)
    return sol[::-1][:k]
