class Solution:
  def longestStrChain(self, words: List[str]) -> int:
    #Solution 1: O(n log n + n*word^2) / O(n)
    words.sort(key = len)
    wordDict = {}
    sol = 1
    for word in words:
      wordDict[word] = 1
      for i in range(len(word)):
        prevWord = word[:i] + word[i+1:]
        if prevWord in wordDict:
          #if there are several prevWords that are in wordDict, so there are multiple paths to word
          wordDict[word] = max(wordDict[word], wordDict[prevWord] + 1)
          sol = max(sol, wordDict[word])
    return sol
