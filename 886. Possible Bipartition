class Solution:
    def possibleBipartition(self, n: int, dislikes: List[List[int]]) -> bool:
        #Solution 1: O(n) / O(n)
        g = defaultdict(list)
        for a, b in dislikes:
            g[a].append(b) #a dislikes b
            g[b].append(a) #even if b does not dislike a, need to be in different groups
        
        seen = [-1] * (n+1)
        def dfs(person, color):
            seen[person] = color
            for nei in g[person]:
                #if neighbor already seen but neighbor not expected color
                if seen[nei] != -1 and seen[nei] != 1 - color:
                    return False
                #if neighbor not seen but remaining DFS not expected color
                if seen[nei] == -1 and not dfs(nei, 1 - color):
                    return False
            return True
        
        for i in range(1, n+1):
            if seen[i] == -1 and not dfs(i, 0): return False
        return True
