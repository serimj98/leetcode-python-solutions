# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class BSTIterator:
    
    #Solution 1:
    def __init__(self, root: Optional[TreeNode]): #O(n) / O(n)
        self.inorder = []
        self.pointer = -1
        def recursive(node):
            if not node: return
            recursive(node.left)
            self.inorder.append(node.val)
            recursive(node.right)
        recursive(root)

    def next(self) -> int: #O(1) / O(1)
        if self.pointer == -1:
            self.pointer = 0
        else:
            self.pointer += 1
        return self.inorder[self.pointer]
        

    def hasNext(self) -> bool: #O(1) / O(1)
        if len(self.inorder) <= self.pointer + 1: return False
        return True
        
    #Solution 2:
    def __init__(self, root: Optional[TreeNode]): #O(h) / O(h)
        self.stack = []
        node = root
        while node: #collect left nodes, i.e. [7, 3]
            self.stack.append(node)
            node = node.left

    def next(self) -> int: #O(h) / O(1)
        cur = self.stack.pop()
        node = cur.right #add right nodes if they exist
        while node:
            self.stack.append(node)
            node = node.left
        return cur.val
        
    def hasNext(self) -> bool: #O(1) / O(1)
        if self.stack: return True
        return False


# Your BSTIterator object will be instantiated and called as such:
# obj = BSTIterator(root)
# param_1 = obj.next()
# param_2 = obj.hasNext()
