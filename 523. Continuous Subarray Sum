class Solution:
    def checkSubarraySum(self, nums: List[int], k: int) -> bool:
        #Solution 1: O(n) / O(min(k, n)), up to k keys in numsDict
        for i in range(1, len(nums)):
            nums[i] += nums[i-1] #[23, 25, 29, 35, 42]
        """
        i.e. nums = [23,(4,8)], k = 6 
             sum([23]) = 23, 23 % 6 = 5
             sum([23,4]) = 27, 27 % 6 = 3
             sum([23,4,8]) = 35, 35 % 6 = 5
        - having the same mod difference means increase of sum by k
        - key = mod of prefix sum / value = index to check length requirement
        """

        numsDict = defaultdict(int) 
        numsDict[0] = -1 #when nums[0] + nums[1] % k == 0, difference will be 1 - (-1) = 2
        for i in range(len(nums)):
            if nums[i] % k in numsDict:
                if i - numsDict[nums[i] % k] >= 2:
                    return True
            #only store first mod if mod doesn't exist in dictionary to ensure longest length
            else: numsDict[nums[i] % k] = i
        return False
