class Solution:
    def maxDistance(self, grid: List[List[int]]) -> int:
        #Solution 1 Multisource BFS: O(n^2) / O(n^2)
        n = len(grid)
        sol = 0

        q = deque() #collect all indices that are land cells
        for i in range(n):
            for j in range(n):
                if grid[i][j] == 1: q.append((i, j))
        if len(q) == n * n or len(q) == 0: return -1
        
        #while loop runs for every 'level', where level represents distance from land to water
        dirs = [(-1, 0), (1, 0), (0, -1), (0, 1)]
        while q:
            size = len(q)
            for _ in range(size):
                r, c = q.popleft()
                for i, j in dirs: #look at surrounding water cells to 
                    if 0 <= r + i < n and 0 <= c + j < n and grid[r + i][c + j] == 0:
                        q.append((r + i, c + j))
                        #levels explored previously are already marked as land
                        grid[r + i][c + j] = 1
            sol += 1
        #need to subtract 1 as BFS adds an additional 1 in the last iteration of while loop,
        #although there is no new level to explore
        return sol - 1
