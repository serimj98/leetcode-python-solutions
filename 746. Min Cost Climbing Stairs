class Solution:
  def minCostClimbingStairs(self, cost: List[int]) -> int:
    #Solution 1: O(n) / O(n)
    if len(cost) < 3: return min(cost)
    dp = [0] * len(cost)
    dp[0], dp[1] = cost[0], cost[1]
    for i in range(2, len(cost)):
      dp[i] = min(dp[i-1], dp[i-2]) + cost[i]
    return min(dp[-1], dp[-2])
  
    #Solution 2: O(n) / O(1)
    if len(cost) < 3: return min(cost)
    twoStep, oneStep = cost[0], cost[1]
    for i in range(2, len(cost)):
      cur = min(twoStep, oneStep) + cost[i]
      twoStep, oneStep = oneStep, cur
    return min(twoStep, oneStep)
