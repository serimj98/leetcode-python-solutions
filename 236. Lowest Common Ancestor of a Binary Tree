# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
  def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':
    #Solution 1: O(n) / O(h) 
    def recursive(node):
      if not node: return False
      left, right = recursive(node.left), recursive(node.right) #if left or right has p or q
      mid = node == p or node == q #if node is either p or q
      if left + right + mid >= 2: self.sol = node #if two out of three flags are True
      return left or right or mid
    recursive(root)
    return self.sol
    
    #Solution 2: O(n) / O(h)
    def recursive(node):
      if not node: return
      if node == p or node == q: return node
      left, right = recursive(node.left), recursive(node.right)
      if not left: return right
      elif not right: return left
      else: return node #if p and q found in different subtrees, node is LCA
    return recursive(root)
