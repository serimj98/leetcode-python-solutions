class Solution:
    def topKFrequent(self, words: List[str], k: int) -> List[str]:
        #Solution 1: O(n log n) / O(n)
        wordCounter = Counter(words)
        #counter.keys(): dict_keys object with keys
        #counter.values(): dict_values object with values
        #counter.items(): dict_items object with (key, value) tuples
        #-wordCounter[x]: sort by number of occurrences, biggest to smallest
        #x: with the same occurrence, sort by word lexicographically
        return sorted(list(wordCounter.keys()), key=lambda x: (-wordCounter[x], x))[:k]

        #Solution 2 Max Heap: O(n + k log n) / O(n)
        wordCounter = Counter(words)
        heap = [(-val, key) for key, val in list(wordCounter.items())]
        heapify(heap)
        return [heappop(heap)[1] for _ in range(k)] #O(log n) heappop k times
