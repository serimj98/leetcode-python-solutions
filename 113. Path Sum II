# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def pathSum(self, root: Optional[TreeNode], targetSum: int) -> List[List[int]]:
        #Solution 1 Recursive: O(n) / O(n)
        if not root: return []
        self.sol = []
        def recursive(node, curSum, curPath):
            if node:
                if not node.left and not node.right: #leaf node
                    if curSum + node.val == targetSum:
                        self.sol.append(curPath + [node.val])
                recursive(node.left, curSum + node.val, curPath + [node.val])
                recursive(node.right, curSum + node.val, curPath + [node.val])
        recursive(root, 0, [])
        return self.sol

        #Solution 2 Iterative: O(n) / O(n)
        if not root: return []
        sol = []
        stack = [(root, 0, [])]
        while stack:
            node, curSum, curPath = stack.pop()
            if not node.left and not node.right:
                if curSum + node.val == targetSum:
                    sol.append(curPath + [node.val])
            if node.left: stack.append((node.left, curSum + node.val, curPath + [node.val]))
            if node.right: stack.append((node.right, curSum + node.val, curPath + [node.val]))
        return sol
