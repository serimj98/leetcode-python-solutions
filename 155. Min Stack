class MinStack:

  def __init__(self):
    #Solution 1: O(1) / O(1)
    self.stack = []
    #Solution 2: O(1) / O(1)
    self.stack = []

  def push(self, val: int) -> None:
    #Solution 1: O(1) / O(1)
    self.stack.append(val)
    #Solution 2: O(1) / O(1)
    if self.stack:
      self.stack.append((val, min(self.stack[-1][1], val)))
    else: self.stack.append((val, val))

  def pop(self) -> None:
    #Solution 1: O(1) / O(1)
    self.stack = self.stack[:len(self.stack)-1]
    #Solution 2: O(1) / O(1)
    self.stack = self.stack[:-1]

  def top(self) -> int:
    #Solution 1: O(1) / O(1)
    return self.stack[-1]
    #Solution 2: O(1) / O(1)
    return self.stack[-1][0]

  def getMin(self) -> int:
    #Solution 1: O(n) / O(1)
    minVal = float('inf')
    for i in self.stack:
      if i < minVal: minVal = i
    return minVal
    #Solution 2: O(1) / O(1)
    return self.stack[-1][1]
        


# Your MinStack object will be instantiated and called as such:
# obj = MinStack()
# obj.push(val)
# obj.pop()
# param_3 = obj.top()
# param_4 = obj.getMin()
