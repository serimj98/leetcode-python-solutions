# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
  def isSubtree(self, root: Optional[TreeNode], subRoot: Optional[TreeNode]) -> bool:
    #Solution 1: O(r+s) / O(r+s)
    if not root: return True
    def sameTree(r, s):
      if not r and not s: return True
      if r and not s: return False
      if s and not r: return False
      if r.val != s.val: return False
      return sameTree(r.left, s.left) and sameTree(r.right, s.right)
    def recursive(r, s):
      if not r: return False
      if r.val == s.val and sameTree(r, s): return True
      return recursive(r.left, s) or recursive(r.right, s)
    return recursive(root, subRoot)
