class Solution:
    def jump(self, nums: List[int]) -> int:
        #Solution 1: O(n^2) / O(n)
        dp = [float('inf')] * len(nums)
        dp[0] = 0
        for i in range(len(nums)):
            for j in range(nums[i] + 1):
                if i + j < len(nums):
                    dp[i+j] = min(dp[i+j], dp[i] + 1)
        return dp[-1]

        #Solution 2: O(n) / O(1)
        if len(nums) <= 1: return 0
        maxJump, curJump = 0, 0
        sol = 0
        for i in range(len(nums)):
            maxJump = max(maxJump, i + nums[i])
            if i == curJump: #reach range of current jump
                sol += 1
                curJump = maxJump
                if curJump >= len(nums) - 1: return sol
