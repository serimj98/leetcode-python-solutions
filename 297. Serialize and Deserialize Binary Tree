# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Codec:

  def serialize(self, root):
    """Encodes a tree to a single string.
    :type root: TreeNode
    :rtype: str
    """
    #Solution 1: O(n) / O(n)
    if not root: return ""
    sol = []
    def preorder(node):
      if not node: return
      sol.append(str(node.val))
      if node.left: preorder(node.left)
      else: sol.append('#')
      if node.right: preorder(node.right)
      else: sol.append('#')
    preorder(root)
    return ",".join(sol)

  def deserialize(self, data):
    """Decodes your encoded data to tree.
    :type data: str
    :rtype: TreeNode
    """
    #Solution 1: O(n) / O(n)
    if not data: return None
    q = deque(data.split(","))
    def recursive():
      if not q: return None
      if q[0] != '#':
        node = TreeNode(q.popleft())
        node.left = recursive()
        node.right = recursive()
        return node
      else:
        q.popleft()
        return None
    return recursive()

# Your Codec object will be instantiated and called as such:
# ser = Codec()
# deser = Codec()
# ans = deser.deserialize(ser.serialize(root))
