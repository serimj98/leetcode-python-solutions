"""
# Definition for a Node.
class Node:
    def __init__(self, val):
        self.val = val
        self.left = None
        self.right = None
        self.parent = None
"""

class Solution:
    def lowestCommonAncestor(self, p: 'Node', q: 'Node') -> 'Node':
        #Solution 1: O(h) / O(n)
        pPath = set()
        while p:
            pPath.add(p)
            p = p.parent
        while q not in pPath:
            q = q.parent
        return q

        #Solution 2: O(h) / O(1)
        def nodeDepth(node):
            d = 0
            while node:
                node = node.parent
                d += 1
            return d

        pDepth, qDepth = nodeDepth(p), nodeDepth(q)
        if pDepth > qDepth:
            for i in range(pDepth - qDepth):
                p = p.parent
        else:
            for i in range(qDepth - pDepth):
                q = q.parent
        
        while p != q:
            p = p.parent
            q = q.parent
        return p
