# """
# This is the robot's control interface.
# You should not implement it, or speculate about its implementation
# """
#class Robot:
#    def move(self):
#        """
#        Returns true if the cell in front is open and robot moves into the cell.
#        Returns false if the cell in front is blocked and robot stays in the current cell.
#        :rtype bool
#        """
#
#    def turnLeft(self):
#        """
#        Robot will stay in the same cell after calling turnLeft/turnRight.
#        Each turn will be 90 degrees.
#        :rtype void
#        """
#
#    def turnRight(self):
#        """
#        Robot will stay in the same cell after calling turnLeft/turnRight.
#        Each turn will be 90 degrees.
#        :rtype void
#        """
#
#    def clean(self):
#        """
#        Clean the current cell.
#        :rtype void
#        """

class Solution:
  def cleanRoom(self, robot):
    """
    :type robot: Robot
    :rtype: None
    """
    #Solution 1: O(n - m), m = # of obstacles, O(n - m)
    #move one step back while facing the same direction
    def back():
      robot.turnRight()
      robot.turnRight()
      robot.move()
      robot.turnRight()
      robot.turnRight()
      
    visited = set()
    dirs = [(-1,0), (0,1), (1,0), (0,-1)]
    def backtrack(cell, d):
      visited.add(cell)
      robot.clean()
      #move in order of 0: up, 1: right, 2: down, 3: left
      for i in range(4):
        newD = (d + i) % 4
        newCell = (cell[0] + dirs[newD][0], cell[1] + dirs[newD][1])
        #if there is no obstacle or already visited cell ahead
        if not newCell in visited and robot.move():
          backtrack(newCell, newD)
          back()
        #right-hand rule: keep turning right at obstacles and move forward
        robot.turnRight()
    backtrack((0,0), 0)
