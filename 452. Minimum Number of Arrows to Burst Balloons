class Solution:
  def findMinArrowShots(self, points: List[List[int]]) -> int:
    #Solution 1: O(n log n) / O(n)
    if not points: return 0
    if len(points) == 1: return 1
    points.sort()
    intervals = [points[0]]
    for start, end in points[1:]:
      lastStart, lastEnd = intervals[-1]
      if start <= lastEnd:
        intervals[-1] = [max(start, lastStart), min(end, lastEnd)]
      else:
        intervals.append([start, end])
    return len(intervals)

    #Solution 2: O(n log n) / O(n), sorting
    if not points: return 0
    points.sort(key = lambda x: x[1]) #sort by end
    sol = 1
    endInterval = points[0][1]
    for start, end in points:
      if endInterval < start: #if current balloon starts after end of previous balloon
        sol += 1
        endInterval = end
    return sol
