# """
# This is BinaryMatrix's API interface.
# You should not implement it, or speculate about its implementation
# """
#class BinaryMatrix(object):
#    def get(self, row: int, col: int) -> int:
#    def dimensions(self) -> list[]:

class Solution:
  def leftMostColumnWithOne(self, binaryMatrix: 'BinaryMatrix') -> int:
    #Solution 1: O(r log c) / O(1)
    rows, cols = binaryMatrix.dimensions()
    l, r = 0, cols - 1
    foundOne = False
    lastIdx = -1
    while l <= r:
      m = (l + r) // 2
      for i in range(rows):
        if binaryMatrix.get(i, m):
          foundOne = True
          lastIdx = m
          break
      if foundOne: r = m - 1
      else: l = m + 1
      foundOne = False
    return lastIdx
  
    #Solution 2: O(r + c) / O(1)
    #once we meet 0 in a row, means no need to check left of row anymore as rows are sorted
    rows, cols = binaryMatrix.dimensions()
    r, c = 0, cols - 1 #start from top right, and move either left or down
    lastIdx = -1
    while c >= 0 and r < rows:
      if binaryMatrix.get(r, c):
        lastIdx = c
        c -= 1
      else:
        r += 1
    return lastIdx
