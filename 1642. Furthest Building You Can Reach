class Solution:
    def furthestBuilding(self, heights: List[int], bricks: int, ladders: int) -> int:
        #Solution 1 Min Heap: O(n log n) / O(n)
        ladderHeap = []
        for i in range(1, len(heights)):
            if heights[i] <= heights[i-1]: continue
            heappush(ladderHeap, heights[i] - heights[i-1])
            if len(ladderHeap) <= ladders: continue
            bricks -= heappop(ladderHeap)
            if bricks < 0: return i-1
        return len(heights)-1

        #Solution 2 Max Heap: O(n log n) / O(n)
        brickHeap = []
        for i in range(1, len(heights)):
            if heights[i] <= heights[i-1]: continue
            heappush(brickHeap, -(heights[i] - heights[i-1]))
            bricks -= (heights[i] - heights[i-1])
            if bricks < 0:
                bricks += -heappop(brickHeap)
                ladders -= 1
                if ladders < 0: return i-1
        return len(heights)-1
