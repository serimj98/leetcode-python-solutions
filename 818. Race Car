class Solution:
  def racecar(self, target: int) -> int:
    #Solution 1 BFS: O(2^n) / O(2^n)
    q = deque([(0, 0, 1)]) # steps, position, speed
    while q:
      steps, position, speed = q.popleft()
      if position == target: return steps
      
      # always add 'A' step no matter what the position is relative to target
      q.append((steps + 1, position + speed, speed * 2))
      
      # only add 'R' step when:
      # 1. position is moving away from target
      # 2. position is passing target
      if (position + speed < target and speed < 0) or (position + speed > target and speed > 0):
        if speed > 0: q.append((steps + 1, position, -1))
        else: q.append((steps + 1, position, 1))
