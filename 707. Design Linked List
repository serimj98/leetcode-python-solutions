class Node:
  def __init__(self, val):
    self.val = val
    self.next = None

class MyLinkedList:
  def __init__(self):
    #Solution 1: O(1) / O(n)
    self.head = None
    self.length = 0

  def get(self, index: int) -> int:
    #Solution 1: O(index) / O(1)
    if index >= self.length:
      return -1
    cur = self.head
    for i in range(index):
      cur = cur.next
    return cur.val

  def addAtHead(self, val: int) -> None:
    #Solution 1: O(1) / O(1)
    newNode = Node(val)
    newNode.next = self.head
    self.head = newNode
    self.length += 1

  def addAtTail(self, val: int) -> None:
    #Solution 1: O(n) / O(1)
    newNode = Node(val)
    if not self.head:
      self.head = newNode
      self.length += 1
      return
    cur = self.head
    while cur and cur.next:
      cur = cur.next
    cur.next = newNode
    self.length += 1

  def addAtIndex(self, index: int, val: int) -> None:
    #Solution 1: O(index) / O(1)
    newNode = Node(val)
    if index > self.length: return
    if index == 0:
      self.addAtHead(val)
      return
    if index == self.length:
      self.addAtTail(val)
      return
    cur = self.head
    for i in range(index - 1):
      cur = cur.next
    afterIndex = cur.next
    cur.next = newNode
    newNode.next = afterIndex
    self.length += 1

  def deleteAtIndex(self, index: int) -> None:
    #Solution 1: O(index) / O(1)
    if index >= self.length: return
    if index == 0:
      self.head = self.head.next
      self.length -= 1
      return
    if self.length == 1:
      self.head = None
      self.length -= 1
      return
    cur = self.head
    for i in range(index - 1):
      cur = cur.next
    cur.next = cur.next.next
    self.length -= 1

# Your MyLinkedList object will be instantiated and called as such:
# obj = MyLinkedList()
# param_1 = obj.get(index)
# obj.addAtHead(val)
# obj.addAtTail(val)
# obj.addAtIndex(index,val)
# obj.deleteAtIndex(index)
