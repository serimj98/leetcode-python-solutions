class Solution:
  def subarraySum(self, nums: List[int], k: int) -> int:
    #Solution 1 TLE: O(n^2) / O(1)
    sol = 0
    for i in range(len(nums)):
      curSum = 0
      curIdx = i
      while curIdx < len(nums):
        curSum += nums[curIdx]
        curIdx += 1
        if curSum == k:
          sol += 1
    return sol
  
    #Solution 2
    #when cumulative sum increases by k, we found a valid subarray
    cumHash = defaultdict(int)
    cumHash[0] = 1 #valid when sum of subarray starting at beginning of array is equal to k
    curSum = 0
    sol = 0
    for i in range(len(nums)):
      curSum += nums[i]
      if (curSum - k) in cumHash:
        sol += cumHash[curSum - k]
      """
      arr = [1, -1, 0], k = 0
      curSum = 1, 0, 0
      cumHash = {0:3, 1:1} 
      """
      cumHash[curSum] += 1
    return sol
