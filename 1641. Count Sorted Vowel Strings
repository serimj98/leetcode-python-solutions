class Solution:
    def countVowelStrings(self, n: int) -> int:
        #Solution 1 Combinations : O(1) / O(1)
        """
        combination with repetition: (k + n - 1)! / (k - 1)! * n!
        k = number of vowels we can choose from, n = length of string
        since k is always 5, we can reduce equation
        """
        return (n + 4) * (n + 3) * (n + 2) * (n + 1) // 24

        #Solution 2 Top-down DP: O(n*k) / O(n*k)
        """
        n = 2, k = 5
        a: aa, ae, ai, ao, au
        e: ee, ei, eo, eu (can't use ea because not lexicographically sorted)
        i: ii, io, iu
        o: oo, ou
        u: uu
        -> 15 possibilities

        k = 5, n = 3
        dp(5, 3) = dp(5, 2) + dp(4, 2) + dp(3, 2) + dp(2, 2) + dp(1, 2)
                 = (5+4+3+2+1) + (4+3+2+1) + (3+2+1) + (2+1) + (1)
                 = dp(5, 2) + dp(4, 3)
                              -> dp(4, 3) = dp(4, 2) + dp(3, 2) + dp(2, 2) + dp(1, 2)

        dp(k, n) = dp(k, n-1) + dp(k-1, n)
        """
        seen = defaultdict(int)
        def dp(k, n):
            if k == 1 or n == 1: return k
            if (k, n) in seen: return seen[k, n]
            for i in range(1, k + 1):
                seen[k, n] += dp(i, n - 1)
            return seen[k, n]
        return dp(5, n)

        #Solution 3 Top-down DP: O(n*k) / O(n*k)
        k = 5
        #dp table has one row of 1s, then n rows of 0s
        dp = [[1] * (k + 1)] + [[0] * (k + 1) for i in range(n)]
        for i in range(1, n+1):
            for j in range(1, k+1):
                dp[i][j] = dp[i][j-1] + dp[i-1][j]
        return dp[n][5]
