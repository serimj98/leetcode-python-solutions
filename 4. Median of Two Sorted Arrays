class Solution:
  def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:
    #Solution 1: O(nums1 + nums2) / O(nums1 + nums2)
    merged = []
    while nums1 and nums2:
      if nums1[0] < nums2[0]:
        merged.append(nums1.pop(0))
      else:
        merged.append(nums2.pop(0))
    if nums1: merged += nums1
    elif nums2: merged += nums2
    if len(merged) % 2 == 1: return merged[len(merged)//2]
    return (merged[len(merged)//2 - 1] + merged[len(merged)//2]) / 2

    #Solution 2: O(nums1 + nums2) / O(1)
      idx, idx1, idx2 = 0, 0, 0
      prev, cur = 0, 0
      while idx <= (len(nums1) + len(nums2)) // 2:
        prev = cur
        if idx1 == len(nums1):
          cur = nums2[idx2]
          idx2 += 1
        elif idx2 == len(nums2):
          cur = nums1[idx1]
          idx1 += 1
        elif nums1[idx1] < nums2[idx2]:
          cur = nums1[idx1]
          idx1 += 1
        else:
          cur = nums2[idx2]
          idx2 += 1
        idx += 1
      if (len(nums1) + len(nums2)) % 2 == 1: return cur
      else: return (prev + cur) / 2

    #Solution 3 Binary Search: O(log(nums1 + nums2)) / O(1)
    #https://www.youtube.com/watch?v=LPFhl65R7ww
    if len(nums1) > len(nums2): #nums1 is shorter
      nums1, nums2 = nums2, nums1
    l, r, half = 0, len(nums1), (len(nums1) + len(nums2) + 1) // 2
    while l <= r:
      m1 = (l + r) // 2
      m2 = half - m1
      if m1 < len(nums1) and nums2[m2-1] > nums1[m1]:
        l = m1 + 1
      elif m1 > 0 and nums1[m1-1] > nums2[m2]:
        r = m1 - 1
      else:
        if m1 == 0: maxLeft = nums2[m2-1]
        elif m2 == 0: maxLeft = nums1[m1-1]
        else: maxLeft = max(nums1[m1-1], nums2[m2-1])
        
        if (len(nums1) + len(nums2)) % 2 == 1: return maxLeft
        
        if m1 == len(nums1): minRight = nums2[m2]
        elif m2 == len(nums2): minRight = nums1[m1]
        else: minRight = min(nums1[m1], nums2[m2])
        
        return (maxLeft + minRight) / 2.0
