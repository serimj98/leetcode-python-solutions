"""
# Definition for a Node.
class Node:
    def __init__(self, val: int = 0, left: 'Node' = None, right: 'Node' = None, next: 'Node' = None):
        self.val = val
        self.left = left
        self.right = right
        self.next = next
"""

class Solution:
  def connect(self, root: 'Node') -> 'Node':
    #Solution 1: O(n) / O(n)
    level = []
    def recursive(node, l):
      if not node: return
      if len(level) <= l:
        level.append([])
      level[l].append(node)
      recursive(node.left, l+1)
      recursive(node.right, l+1)
    recursive(root, 0)
    for l in level:
      for n in range(len(l) - 1):
        l[n].next = l[n+1]
      l[-1].next = None
    return root
  
    #Solution 2: O(n) / O(n)
    if not root: return
    level = [root]
    while level:
      nextLevel = []
      for node in level:
        if node.left: nextLevel.append(node.left)
        if node.right: nextLevel.append(node.right)
      for i in range(len(level) - 1):
        level[i].next = level[i + 1]
      level[-1].next = None
      level = nextLevel
    return root
  
    #Solution 3: O(n) / O(1)
    if not root: return
    prevLevel = root
    while prevLevel:
      curLevel = dummy = Node(0)
      while prevLevel:
        if prevLevel.left:
          curLevel.next = prevLevel.left
          curLevel = curLevel.next
        if prevLevel.right:
          curLevel.next = prevLevel.right
          curLevel = curLevel.next
        prevLevel = prevLevel.next
      prevLevel = dummy.next
      dummy.next = None
    return root
