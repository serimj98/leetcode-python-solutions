class Solution:
    def latestDayToCross(self, row: int, col: int, cells: List[List[int]]) -> int:
        #Solution 1 BFS TLE: O(row*col*cells) / O(row*col)
        land = [[0 for i in range(col)] for j in range(row)]
        self.dirs = [(-1,0), (1,0), (0,-1), (0,1)]

        def bfs(q, visited):
            for i in range(col):
                if land[0][i] == 0:
                    q.append((0, i))
            while q:
                r, c = q.popleft()
                for i, j in self.dirs:
                    if 0 <= r+i < row and 0 <= c+j < col and (r+i, c+j) not in visited:
                        if land[r+i][c+j] == 0:
                            visited.add((r+i, c+j))
                            if r+i == row - 1: return True
                            q.append((r+i, c+j))
            return False

        for i in range(len(cells)):
            if not bfs(deque(), set()):
                return i - 1
            change = cells[i]
            land[change[0]-1][change[1]-1] = 1
        return len(cells) - 1

        #Solution 2 BFS + Binary Search: O(row*col*log(cells)) / O(row*col)
        self.dirs = [(-1,0), (1,0), (0,-1), (0,1)]

        def bfs(day, q, visited):
            land = [[0 for i in range(col)] for j in range(row)]
            for r, c in cells[:day]:
                land[r-1][c-1] = 1

            for i in range(col):
                if land[0][i] == 0:
                    q.append((0, i))
            while q:
                r, c = q.popleft()
                for i, j in self.dirs:
                    if 0 <= r+i < row and 0 <= c+j < col and (r+i, c+j) not in visited:
                        if land[r+i][c+j] == 0:
                            visited.add((r+i, c+j))
                            if r+i == row - 1: return True
                            q.append((r+i, c+j))
            return False

        l, r = 0, len(cells) - 1
        while l <= r:
            m = r - (r - l) // 2
            if not bfs(m, deque(), set()): r = m - 1
            else: l = m + 1
        return r
