"""
# Definition for a Node.
class Node:
    def __init__(self, val=None, next=None):
        self.val = val
        self.next = next
"""

class Solution:
    def insert(self, head: 'Optional[Node]', insertVal: int) -> 'Node':
        #Solution 1: O(n) / O(n)
        node = Node(insertVal)

        #if head is empty, create create new single circular list
        if not head:
            node.next = node
            return node
        
        #find prev and cur nodes where insertVal should go in between
        prev, cur = head, head.next
        while prev.next != head:
            #insert between two nodes
            if prev.val <= node.val <= cur.val: break
            #insert at beginning or end of sorted nodes
            #ex) 3 -> (4) -> 1 / 3 -> (0) -> 1
            if prev.val > cur.val and (node.val > prev.val or node.val < cur.val): break
            prev, cur = prev.next, cur.next
        
        #connect prev -> node -> cur
        node.next = cur
        prev.next = node
        return head
