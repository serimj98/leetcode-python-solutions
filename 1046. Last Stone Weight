class Solution:
    def lastStoneWeight(self, stones: List[int]) -> int:
        #Solution 1 Sorting: O(n^2) / O(n)
        stones.sort()
        while len(stones) > 1:
            stone1 = stones.pop()
            stone2 = stones.pop()
            if stone1 != stone2: bisect.insort(stones, stone1 - stone2) #O(n) to insert sorted
        return stones[0] if stones else 0

        #Solution 2 Heap: O(n log n) / O(n)
        for i in range(len(stones)):
            stones[i] *= -1
        heapq.heapify(stones) #O(n)
        while len(stones) > 1:
            stone1 = -heapq.heappop(stones) #O(log n)
            stone2 = -heapq.heappop(stones) #O(log n)
            if stone1 != stone2: heapq.heappush(stones, -(stone1 - stone2))
        return -heapq.heappop(stones) if stones else 0
