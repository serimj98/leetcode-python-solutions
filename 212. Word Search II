class TrieNode:
  def __init__(self):
    self.children = {}
    self.endOfWord = False

class Trie:

  def __init__(self):
    self.root = TrieNode()

  def insert(self, word: str) -> None:
    cur = self.root
    for i in word:
      if i not in cur.children:
        cur.children[i] = TrieNode()
      cur = cur.children[i]
    cur.endOfWord = True

class Solution:
  def findWords(self, board: List[List[str]], words: List[str]) -> List[str]:
    #Solution 1: O(r*c*3^len of longest word) / O(r*c)
    self.numWords = len(words)
    def dfs(r, c, node, cur):
      if self.numWords == 0: return
      #check if the current character is end of the word
      if node.endOfWord:
        sol.append(cur)
        node.endOfWord = False
        self.numWords -= 1
      if r < 0 or c < 0 or r > len(board) - 1 or c > len(board[0]) - 1: return
      temp = board[r][c]
      node = node.children.get(temp) #find next child amongst children dictionary
      if not node: return
      #in order to avoid going back and forth between two nodes
      board[r][c] = '#'
      dfs(r-1, c, node, cur+temp)
      dfs(r+1, c, node, cur+temp)
      dfs(r, c-1, node, cur+temp)
      dfs(r, c+1, node, cur+temp)
      board[r][c] = temp
      
    sol = []
    trie = Trie()
    node = trie.root
    #create the trie node to search with DFS
    for w in words:
      trie.insert(w)
    for r in range(len(board)):
      for c in range(len(board[0])):
        dfs(r, c, node, "")
    return sol
