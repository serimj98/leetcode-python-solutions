class Solution:
    def findAllRecipes(self, recipes: List[str], ingredients: List[List[str]], supplies: List[str]) -> List[str]:
        #Solution 1 DFS: O(v + e) / O(v + e)
        graph = defaultdict(list)
        for i in range(len(recipes)):
            graph[recipes[i]] = ingredients[i]
            suppliesSet = set(supplies)
        
        def dfs(recipe, visiting):
            if recipe in suppliesSet: return True
            if recipe not in graph: return False
            for ingredient in graph[recipe]:
                if ingredient in suppliesSet: continue
                if ingredient in visiting: return False
                visiting.add(ingredient)
                if not dfs(ingredient, visiting): return False
                visiting.remove(ingredient)
            suppliesSet.add(ingredient)
            return True
        
        sol = []
        for recipe in recipes:
            if recipe in suppliesSet: sol.append(recipe)
            elif dfs(recipe, set()): sol.append(recipe)
        return sol

        #Solution 2 Topological Sort: O(v + e) / O(v + e)
        #1. create adjacency list and compute indegree for every node
        g = defaultdict(list)
        indegree = defaultdict(int)
        for i in range(len(recipes)):
            for j in range(len(ingredients[i])):
                g[ingredients[i][j]].append(recipes[i]) #{ingredient: recipe}
                indegree[recipes[i]] += 1 #number of incoming edges (ingredients)

        #2. find all recipes with indegree == 0 as starting point for BFS
        q = deque()
        for supply in supplies:
            q.append(supply)
        for recipe in indegree:
            if indegree[recipe] == 0:
                q.append(recipe)

        #3. decrement indegree for recipes that have prerequisites with indegree == 0
        recipeSet = set(recipes)
        sol = []
        while q:
            cur = q.popleft()
            if cur in recipeSet:
                sol.append(cur)
            for nxt in g[cur]:
                if indegree[nxt] > 0: indegree[nxt] -= 1
                if indegree[nxt] == 0: q.append(nxt)
        return sol
