class Solution:
    def exist(self, board: List[List[str]], word: str) -> bool:
        #Solution 1: O(r*c*3^word) / O(word)
        if not board: return True

        self.dirs = [(-1,0), (1,0), (0,-1), (0,1)]
        self.found = False
        def dfs(r, c, wordIdx):
            if board[r][c] == word[wordIdx]:
                if wordIdx == len(word) - 1:
                    self.found = True
                    return
                val = board[r][c]
                board[r][c] = '#' #mark as visited temporarily while moving to new direction
                for x, y in self.dirs:
                    newR, newC = r + x, c + y
                    if 0 <= newR < len(board) and 0 <= newC < len(board[0]):
                        dfs(newR, newC, wordIdx + 1)
                board[r][c] = val
        
        for i in range(len(board)):
            for j in range(len(board[0])):
                dfs(i, j, 0)
                if self.found: return True
        return False
