# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def sortLinkedList(self, head: Optional[ListNode]) -> Optional[ListNode]:
        #Solution 1: O(n) / O(1)
        positiveDummy = positiveCur = ListNode()
        negativeDummy = negativeCur = ListNode()

        while head:
            if head.val >= 0:
                positiveCur.next = head
                head = head.next
                positiveCur = positiveCur.next
                positiveCur.next = None
            else:
                negativeCur.next = head
                head = head.next
                negativeCur = negativeCur.next
                negativeCur.next = None
        
        def reverseLinkedList(node):
            prev = None
            while node:
                nxt = node.next
                node.next = prev
                prev = node
                node = nxt
            return prev
        
        positiveList = positiveDummy.next

        if negativeDummy.next:
            negativeList = reverseLinkedList(negativeDummy.next)
            sol = negativeList
            while negativeList:
                if not negativeList.next:
                    negativeList.next = positiveList
                    break
                negativeList = negativeList.next
            return sol
        
        return positiveList

        #Solution 2: O(n) / O(1)
        cur = head
        while cur.next:
            if cur.val > cur.next.val: #cur.next is negative, insert at head
                temp = cur.next
                cur.next = temp.next #skip temp when connecting
                temp.next = head #connect temp to head
                head = temp #reassign head to temp
            else:
                cur = cur.next
        return head
