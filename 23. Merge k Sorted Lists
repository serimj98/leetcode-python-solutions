# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
  def mergeKLists(self, lists: List[Optional[ListNode]]) -> Optional[ListNode]:
    #Solution 1: O(n log n) / O(n)
      if not lists: return
      heap = []
      for i, node in enumerate(lists):
        if node: heap.append([node.val, i, node]) #[node value, index, node]
      heapify(heap) #[1, 1, 2] #O(n)

      dummy = cur = ListNode()
      while heap: #O(n)
        val, idx, node = heappop(heap) #O(log n)
        cur.next = node
        if node.next: heappush(heap, [node.next.val, idx, node.next]) #O(log n)
        node.next = None
        cur = cur.next
      return dummy.next
  
    #Solution 2 Divide and Conquer Iterative: O(n log n) / O(1)
    def mergeTwoLists(l, r):
      dummy = cur = ListNode()
      while l and r:
        if l.val < r.val:
          cur.next = l
          l = l.next
        else:
          cur.next = r
          r = r.next
        cur = cur.next
      if not l or not r: cur.next = l or r
      return dummy.next
      
    def mergeLists(lists):
      if not lists: return
      if len(lists) == 1: return lists[0]
      mid = len(lists) // 2
      l, r = mergeLists(lists[:mid]), mergeLists(lists[mid:])
      return mergeTwoLists(l, r)
    
    return mergeLists(lists)
  
    #Solution 3 Divide and Conquer Recursive: O(n log n) / O(log n), recursive stack
    """
    [1,2]
         l
    [1,3]  1 (r) -> mergeTwoLists(1, 3), return 1 (r)
       r            1 (l) -> mergeTwoLists(2, 3), return 1 (l)
                             2 -> mergeTwoLists(None, 3), return 2
                                  return 3
    """
    
    def mergeTwoLists(l, r):
      if not l: return r
      if not r: return l
      if l.val < r.val:
        l.next = mergeTwoLists(l.next, r)
        return l
      else:
        r.next = mergeTwoLists(l, r.next)
        return r
      
    def mergeLists(lists):
      if not lists: return
      if len(lists) == 1: return lists[0]
      mid = len(lists) // 2
      l, r = mergeLists(lists[:mid]), mergeLists(lists[mid:])
      return mergeTwoLists(l, r)
    
    return mergeLists(lists)
