class Solution:
  def isValidSudoku(self, board: List[List[str]]) -> bool:
    #Solution 1: O(r*c) / O(9)
    for r in range(len(board)):
      curNums = set()
      for c in range(len(board[0])):
        if board[r][c] != "." and board[r][c] in curNums: return False
        curNums.add(board[r][c])
        
    for c in range(len(board[0])):
      curNums = set()
      for r in range(len(board)):
        if board[r][c] != "." and board[r][c] in curNums: return False
        curNums.add(board[r][c])

    for rStart in range(3):
      for cStart in range(3):
        curNums = set()
        for r in range(rStart*3, rStart*3 + 3):
          for c in range(cStart*3, cStart*3 + 3):
            if board[r][c] != "." and board[r][c] in curNums: return False
            curNums.add(board[r][c])
    
    return True

    #Solution 2: O(r*c) / O(9)
      rows = [set() for _ in range(9)]
      cols = [set() for _ in range(9)]
      boxes = [set() for _ in range(9)]
      for i in range(len(board)):
        for j in range(len(board[0])):
          if board[i][j] == ".": continue
          boxIdx = (i // 3) * 3 + (j // 3)
          if board[i][j] in rows[i] or board[i][j] in cols[j] or board[i][j] in boxes[boxIdx]: 
           return False
          rows[i].add(board[i][j])
          cols[j].add(board[i][j])
          boxes[boxIdx].add(board[i][j])
      return True
