# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def maxDepth(self, root: Optional[TreeNode]) -> int:
        #Solution 1 Recursive DFS: O(n) / O(h)
        def recursive(node):
            if not node: return 0
            return max(recursive(node.left), recursive(node.right)) + 1
        return recursive(root)

        #Solution 2 Iterative BFS: O(n) / O(h)
        if not root: return 0
        q = deque()
        q.append((root, 1))
        sol = float('-inf')
        while q:
            node, depth = q.popleft()
            sol = max(sol, depth)
            if node.left: q.append((node.left, depth + 1))
            if node.right: q.append((node.right, depth + 1))
        return sol

        #Solution 3 Iterative DFS: O(n) / O(h)
        if not root: return 0
        s = []
        s.append((root, 1))
        sol = float('-inf')
        while s:
            node, depth = s.pop()
            sol = max(sol, depth)
            if node.left: s.append((node.left, depth + 1))
            if node.right: s.append((node.right, depth + 1))
        return sol
