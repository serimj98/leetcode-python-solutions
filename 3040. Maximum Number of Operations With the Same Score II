class Solution:
    def maxOperations(self, nums: List[int]) -> int:
        #Solution 1: O(n^2) / O(n^2)
        self.memo = [[0] * len(nums) for _ in range(len(nums))]
        def recursive(l, r, curSum):
            if l >= r: return 0
            if self.memo[l][r] != 0: return self.memo[l][r]
            count = 0
            if nums[l] + nums[l+1] == curSum:
                count = max(count, recursive(l+2, r, curSum) + 1)
            if nums[l] + nums[r] == curSum:
                count = max(count, recursive(l+1, r-1, curSum) + 1)
            if nums[r] + nums[r-1] == curSum:
                count = max(count, recursive(l, r-2, curSum) + 1)
            self.memo[l][r] = count
            return count

        sol = 0
        l, r = 0, len(nums) - 1
        firstTwo = max(sol, recursive(l+2, r, nums[l] + nums[l+1]) + 1)
        lastTwo = max(sol, recursive(l, r-2, nums[r] + nums[r-1]) + 1)
        firstLast = max(sol, recursive(l+1, r-1, nums[l] + nums[r]) + 1)
        return max(firstTwo, lastTwo, firstLast)
