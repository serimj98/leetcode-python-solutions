class Solution:
    def validPalindrome(self, s: str) -> bool:
        #Solution 1 TLE: O(n^2) / O(n)
        def checkPalindrome(s):
            i, j = 0, len(s) - 1
            while i <= j:
                if s[i] != s[j]: return False
                i += 1
                j -= 1
            return True

        if checkPalindrome(s): return True

        for i in range(len(s)):
            if checkPalindrome(s[:i] + s[i+1:]): return True
        return False

        #Solution 2: O(n) / O(1)
        def checkPalindrome(i, j):
            while i <= j:
                if s[i] != s[j]: return False
                i += 1
                j -= 1
            return True
        
        if checkPalindrome(0, len(s)-1): return True

        i, j = 0, len(s) - 1
        while i <= j:
            if s[i] == s[j]:
                i += 1
                j -= 1
            else:
                return checkPalindrome(i+1, j) or checkPalindrome(i, j-1)
        return False

        #Solution 3: O(n) / O(1), extend to n deletes
        def verify(l, r, deletes):
            while l < r:
                if s[l] != s[r]:
                    if deletes == 0: return False
                    return verify(l+1, r, deletes-1) or verify(l, r-1, deletes-1)
                else:
                    l += 1
                    r -= 1
            return True
        return verify(0, len(s)-1, 1)
