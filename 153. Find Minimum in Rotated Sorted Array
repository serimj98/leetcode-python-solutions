class Solution:
  def findMin(self, nums: List[int]) -> int:
    #Solution 1: O(n) / O(1)
    return min(nums)
  
    #Solution 2: O(log n) / O(1)
    l, r = 0, len(nums) - 1
    #if last element is greater than first element, there is no rotation
    if nums[l] < nums[r]: return nums[l]
    while (r - l > 1):
      m = (l + r) // 2
      #right half is sorted, and minimum should be in left
      if nums[l] > nums[m]: r = m
      #left half is sorted, and minimum should be in the right
      else: l = m
    return nums[r]
