# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def verticalOrder(self, root: Optional[TreeNode]) -> List[List[int]]:
        #Solution 1 BFS: O(n) / O(n)
        if not root: return
        orderDict = defaultdict(list)
        q = deque([])
        q.append((root, 0))

        while q:
            node, level = q.popleft()
            orderDict[level].append(node.val)
            if node.left: q.append((node.left, level-1))
            if node.right: q.append((node.right, level+1))

        sol = []
        startIdx = min(orderDict.keys())
        for i in range(startIdx, startIdx + len(orderDict)):
            sol.append(orderDict[i])
        return sol
