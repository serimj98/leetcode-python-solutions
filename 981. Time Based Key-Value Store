class TimeMap:

    #Solution 1:
    def __init__(self): #O(1) / O(n)
        self.store = defaultdict(list) #{key: (timestamp, value)}

    def set(self, key: str, value: str, timestamp: int) -> None: #O(1) / O(1)
        self.store[key].append((timestamp, value)) #will be sorted by timestamp

    def get(self, key: str, timestamp: int) -> str: #O(log n) / O(1)
        keyList = self.store[key]
        if not keyList: return ""

        #return closest timestamp smaller than timestamp requested for
        l, r = 0, len(keyList) - 1
        sol = ""
        while l <= r:
            m = l + (r - l) // 2
            if keyList[m][0] == timestamp: return keyList[m][1]
            elif keyList[m][0] < timestamp:
                sol = keyList[m][1]
                l = m + 1
            else: r = m - 1
        return sol


# Your TimeMap object will be instantiated and called as such:
# obj = TimeMap()
# obj.set(key,value,timestamp)
# param_2 = obj.get(key,timestamp)
