# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def findLeaves(self, root: Optional[TreeNode]) -> List[List[int]]:
        #Solution 1: O(n) / O(n)
        sol = []
        def recursive(node):
            if not node: return -1
            left = recursive(node.left)
            right = recursive(node.right)
            level = max(left, right) + 1 #height from leaf of tree to current node
            if level >= len(sol): sol.append([])
            sol[level].append(node.val)
            return level
        
        recursive(root)
        return sol

        #Solution 2: O(n) / O(n)
        self.leafDict = defaultdict(list)
        def recursive(node):
            if not node: return 0
            left = recursive(node.left)
            right = recursive(node.right)
            level = max(left, right) + 1
            self.leafDict[level].append(node.val)
            return level
        recursive(root)
        
        sol = []
        for level in self.leafDict:
            sol.append(self.leafDict[level])
        return sol
