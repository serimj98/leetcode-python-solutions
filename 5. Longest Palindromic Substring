class Solution:
  def longestPalindrome(self, s: str) -> str:
    #Solution 1: O(n^3) / O(n)
    def isPalindrome(substring):
      return substring == substring[::-1]
    sol = s[0]
    for l in range(len(s)-1):
      for r in range(l+1, len(s)):
        if isPalindrome(s[l:r+1]):
          if len(s[l:r+1]) > len(sol):
            sol = s[l:r+1]
    return sol
    
    #Solution 2 Two Pointer: O(n^2) / O(n)
    def checkPalindrome(l, r):
      while l >= 0 and r < len(s) and s[l] == s[r]:
        l -= 1
        r += 1
      return s[l+1:r]
    sol = s[0]
    for i in range(len(s)):
      if len(checkPalindrome(i, i)) > len(sol):
        sol = checkPalindrome(i, i)
      if i < len(s) - 1 and len(checkPalindrome(i, i+1)) > len(sol):
        sol = checkPalindrome(i, i+1)
    return sol
