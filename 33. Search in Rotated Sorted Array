class Solution:
  def search(self, nums: List[int], target: int) -> int:
    l, r = 0, len(nums) - 1
    while l <= r:
      m = (l + r) // 2
      if nums[m] == target: return m
      if nums[l] <= nums[m]: #inflection point is in the right, [l, m] is ascending
        if nums[l] <= target <= nums[m]:
          r = m - 1
        else:
          l = m + 1
      else: #inflection point is in the left, [m, r] is ascending
        if nums[l] <= target <= nums[m]:
          l = m + 1
        else:
          r = m - 1
    return -1
