class Solution:
    def minimumOperations(self, nums: List[int]) -> int:
        #Solution 1: O(n log n) / O(n)
        if len(nums) <= 1: return 0
        
        even_dict = defaultdict(int)
        odd_dict = defaultdict(int)
        
        for i in range(len(nums)):
            if i % 2 == 0:
                even_dict[nums[i]] += 1 #even_dict = {1:1, 2:1, 3:1}
            else:
                odd_dict[nums[i]] += 1 #odd_dict = {3:2, 4:1}
                                  
        odd = sorted(((v, k) for k, v in odd_dict.items())) #odd = {1:1, 1:2, 1:3}
        even = sorted(((v, k) for k, v in even_dict.items())) #even = {1:4, 2:3}

        if odd[-1][1] != even[-1][1]: #if not the same element, choose the higher freq
            return len(nums) - odd[-1][0] - even[-1][0] #change everything except most frequent values
        
        else: #if the same element is both the greatest frequency in odd/even
            c1 = len(nums) - odd[-1][0] - (even[-2][0] if len(even)>1 else 0)
            c2 = len(nums) - even[-1][0] - (odd[-2][0] if len(odd)>1 else 0)

            return min(c1, c2)
