class Solution:
  def majorityElement(self, nums: List[int]) -> List[int]:
    #Solution 1: O(n) / O(n)
    numsCounter = Counter(nums)
    maj = len(nums) // 3
    sol = []
    for i in numsCounter:
      if numsCounter[i] > maj: sol.append(i)
    return sol
  
    #Solution 2 Boyer-Moore Majority Vote algorithm: O(n) / O(1)
    ctr = Counter() #there can be a maximum of two elements (element that appears more than n/3)
    for n in nums:
      ctr[n] += 1
      if len(ctr) == 3:
        #delete one from each element, as we can still track two elements that are the majority
        ctr -= Counter(set(ctr))
    sol = []
    for n in ctr:
      if nums.count(n) > len(nums)/3:
        sol.append(n)
    return sol
