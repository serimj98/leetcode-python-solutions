# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
  def sortList(self, head: Optional[ListNode]) -> Optional[ListNode]:
    #Solution 1: O(n log n) / O(n)
    l = []
    while head:
      l.append(head.val)
      head = head.next
    l.sort()
    sol = dummy = ListNode(0)
    for i in l:
      dummy.next = ListNode(i)
      dummy = dummy.next
    return sol.next
  
    #Solution 2 Merge Sort: O(n log n) / O(n log n), recursive stack is O(log n)
    def mergeSort(l, r):
      if not l or not r: return l or r
      dummy = cur = ListNode(0)
      while l and r:
        if l.val <= r.val:
          cur.next = l
          l = l.next
        else:
          cur.next = r
          r = r.next
        cur = cur.next
      cur.next = l or r
      return dummy.next
      
    def recursive(node):
      if not node or not node.next: return node
      slow, fast = node, node.next
      while fast and fast.next:
        slow = slow.next
        fast = fast.next.next
      mid = slow.next
      slow.next = None
      l, r = recursive(node), recursive(mid)
      return mergeSort(l, r)
  
    return recursive(head)
