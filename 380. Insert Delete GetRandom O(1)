class RandomizedSet:

  def __init__(self):
    """
    Initialize your data structure here.
    """
    # Solution 1 O(1) / O(n): initialize set 
    self.randSet = set()
    
    # Solution 2 O(1) / O(n): initialize set and list
    self.randHash = {}
    self.arr = []

  def insert(self, val: int) -> bool:
    """
    Inserts a value to the set. Returns true if the set did not already contain the
    specified element.
    """
    # Solution 1 O(1) / O(1): insert element to set if not already in the set
    if val not in self.randSet:
      self.randSet.add(val)
      return True
    else: return False
    
    # Solution 2 O(1) / O(1): keep track of index in array while updating set
    if val not in self.randHash:
      self.arr.append(val) #arr = [1, 2, 3], randHash = {1:0, 2:1, 3:2}
      self.randHash[val] = len(self.arr) - 1 #store index in array with value
      return True
    else: return False

  def remove(self, val: int) -> bool:
    """
    Removes a value from the set. Returns true if the set contained the specified element.
    """
    # Solution 1 O(1) / O(1): remove element to set if already in the set
    if val in self.randSet:
      self.randSet.remove(val)
      return True
    else: return False
    
    # Solution 2 O(1) / O(1): move last value into removed element's place
    if val in self.randHash:
      #randHash = {5:0, 3:1, 7:2, 4:3} / arr = [5, 3, 7, 4]
      #if we want to remove 3...
      #randHash = {5:0, 3:1, 7:2, 4:1} #change last element to index we want to replace
      #arr = [5, _, 7, 4] -> [5, 4, 7, 4]
      #after popping values...
      #randHash = {5:0, 7:2, 4:1} #remove value, but its index still exists
      #arr = [5, 4, 7]

      self.randHash[self.arr[-1]] = self.randHash[val]
      self.arr[self.randHash[val]] = self.arr[-1]
      self.randHash.pop(val)
      self.arr.pop()
      
      return True
    else: return False

  def getRandom(self) -> int:
    """
    Get a random element from the set.
    """
    # Solution 1 O(n) / O(n): convert randSet to list to get random element
    randList = list(self.randSet)
    return random.choice(randList)
    
    #Solution 2 O(1) / O(1): get random element from arr
    return random.choice(self.arr)

# Your RandomizedSet object will be instantiated and called as such:
# obj = RandomizedSet()
# param_1 = obj.insert(val)
# param_2 = obj.remove(val)
# param_3 = obj.getRandom()
