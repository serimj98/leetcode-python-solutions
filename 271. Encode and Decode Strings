class Codec:
    def encode(self, strs: List[str]) -> str:
        """Encodes a list of strings to a single string.
        """
        #Solution 1: O(n) / O(n)
        encoded = []
        for s in strs:
            encoded.append(chr(len(s))) #corresponding unicode character in one byte
            encoded.append(s)
        print('encoded', encoded)
        return "".join(encoded)

    def decode(self, s: str) -> List[str]:
        """Decodes a single string to a list of strings.
        """
        #Solution 1: O(n), n = # of strings / O(n)
        idx = 0
        decoded = []
        while idx < len(s):
            lenStr = ord(s[idx])
            idx += 1
            decoded.append(s[idx:idx+lenStr])
            idx += lenStr
        return decoded

# Your Codec object will be instantiated and called as such:
# codec = Codec()
# codec.decode(codec.encode(strs))
