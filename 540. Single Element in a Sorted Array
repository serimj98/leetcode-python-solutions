class Solution:
    def singleNonDuplicate(self, nums: List[int]) -> int:
        #Solution 1: O(n) / O(1)
        if not nums: return
        if len(nums) == 1: return nums[0]
        for i in range(0, len(nums) - 1, 2):
            if nums[i] != nums[i+1]: return nums[i]
        return nums[-1]

        #Solution 2: O(log n) / O(1)
        if not nums: return
        l, r = 0, len(nums) - 1
        while l < r:
            m = l + (r - l) // 2
            #to keep index even, meaning if nums[m] != nums[m+1], odd # of elements on left
            if m % 2 != 0: m -= 1
            if nums[m] != nums[m+1]: r = m #i.e. [1,1,2,3,3,4,4,8,8]
            else: l = m + 2 #i.e. [1,1,3,3,4,4,2,8,8], nums[m] and nums[m+1] are a pair already
        return nums[l] #l and r converge on single point
