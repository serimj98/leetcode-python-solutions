class MovingAverage:

  def __init__(self, size: int):
    #Solution 1: O(1) / O(1)
    self.window = deque()
    self.size = size
    #Solution 2: O(1) / O(1)
    self.window = deque()
    self.windowSum = 0
    self.windowSize = 0
    self.size = size

  def next(self, val: int) -> float:
    #Solution 1: O(n) / O(size)
    self.window.append(val)
    if len(self.window) > self.size: self.window.popleft()
    return sum(self.window) / len(self.window)
    #Solution 2: O(1) / O(size)
    pop = 0
    self.window.append(val)
    self.windowSize += 1
    if self.windowSize > self.size:
      pop = self.window.popleft()
    self.windowSum = self.windowSum + val - pop
    return self.windowSum / min(self.size, self.windowSize)

# Your MovingAverage object will be instantiated and called as such:
# obj = MovingAverage(size)
# param_1 = obj.next(val)
