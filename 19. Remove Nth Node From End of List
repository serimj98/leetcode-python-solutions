# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
  def removeNthFromEnd(self, head: Optional[ListNode], n: int) -> Optional[ListNode]:
    #Solution 1 Two Pass: O(n) / O(1)
    cur = head
    listLen = 0
    while cur:
      listLen += 1
      cur = cur.next
    if listLen == n: return head.next #skip the first element
    sol = head
    for i in range(listLen-n-1):
      head = head.next
    head.next = head.next.next
    return sol
  
    #Solution 2 One Pass: O(n) / O(1)
    slow = fast = head
    for i in range(n):
      fast = fast.next
    if not fast: return head.next #in the case head is removed
    while fast.next:
      slow = slow.next
      fast = fast.next
    slow.next = slow.next.next
    return head
