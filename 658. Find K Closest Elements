class Solution:
    def findClosestElements(self, arr: List[int], k: int, x: int) -> List[int]:
        #Solution 1: O(n log k) / O(k)
        heap = []
        for e in arr:
            if len(heap) < k:
                heappush(heap, (-abs(e - x), -e))
            else:
                heappushpop(heap, (-abs(e - x), -e))
        return sorted([-e[1] for e in heap])

        #Solution 2: O(log n + k) / O(k)
        if len(arr) <= k: return arr
        if x <= arr[0]: return arr[:k]
        if x >= arr[-1]: return arr[len(arr)-k:]

        #find closest integer immediately smaller than x, O(log n)
        l, r = 0, len(arr) - 1
        idx = 0
        while l <= r:
            m = l + (r - l) // 2
            if arr[m] == x:
                idx = m
                break
            elif arr[m] < x:
                l = m + 1
                idx = m
            else:
                r = m - 1
        
        #since the idx we found is closest integer smallest than x,
        #set j to be one above idx, so we can compare two integers
        #immediately smaller than and greater than x, O(k)
        sol = deque()
        i, j = idx, idx + 1
        while len(sol) < k:
            if abs(arr[i] - x) <= abs(arr[j] - x):
                sol.appendleft(arr[i])
                i -= 1
            else:
                sol.append(arr[j])
                j += 1
            if i < 0:
                for _ in range(k - len(sol)):
                    sol.append(arr[j])
                    j += 1
                break
            if j >= len(arr):
                for _ in range(k - len(sol)):
                    sol.appendleft(arr[i])
                    i -= 1
                break
        return sol
