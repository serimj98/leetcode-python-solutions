class Solution:
    def soupServings(self, n: int) -> float:
        #Solution 1: O(n^2) / O(n^2)
        @lru_cache(None)
        def dfs(a, b):
            if a <= 0 and b <= 0: return 0.5
            if a <= 0: return 1
            if b <= 0: return 0
            return 0.25 * (dfs(a-100, b) + dfs(a-75, b-25) + dfs(a-50, b-50)+ dfs(a-25, b-75))
        return 1 if n > 5000 else dfs(n, n)

        #Solution 2: O(n^2) / O(n^2)
        #simplifies to [A, B] -> [4, 0], [3, 1], [2, 2], [1,3]
        servings = ceil(n / 25) #25ml as one serving
        #dp[i][j] = 0.25 * (dp[i-4][j] + dp[i-3][j-1] + dp[i-2][j-2] + dp[i-1][j-3])
        dp = defaultdict(dict)
        def calculateDP(i, j):
            return (dp[max(0, i-4)][j] + dp[max(0, i-3)][j-1] + \
                    dp[max(0, i-2)][max(0, j-2)] + dp[i-1][max(0, j-3)]) / 4
        
        dp[0][0] = 0.5 #dp[0][0] where a == 0 and b == 0 is half probability
        for k in range(1, servings + 1):
            dp[0][k] = 1 #a == 0, probability = 1
            dp[k][0] = 0 #b == 0, probability = 0
            for j in range(1, k + 1): #all combinations of 1 through # of servings
                dp[j][k] = calculateDP(j, k)
                dp[k][j] = calculateDP(k, j)
            if dp[k][k] > 1 - 1e-5: return 1
        return dp[servings][servings]
