# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
  def swapPairs(self, head: ListNode) -> ListNode:
    #Solution 1: O(n) / O(1)
    if not head or not head.next: return head
    """
     p      c
    None -> 1 -> 2 -> 3 -> 4 -> None
    
    c
    1 ->    2 -> 3 -> 4 -> None
    None ->
     p
     
            c
            1 ->
    None -> 2 -> 3 -> 4 -> None
     p
     
      p          c
    None -> 2 -> 1 -> 3 -> 4 -> None

                 p    c
    None -> 2 -> 1 -> 3 -> 4 -> None
    
    """
    dummy = ListNode(None, head)
    prev, cur = dummy, head
    while cur and cur.next:
      prev.next = cur.next
      cur.next = cur.next.next
      prev.next.next = cur
      prev, cur = cur, cur.next
    return dummy.next

    #Solution 2: O(n) / O(1)
    def swap(node1, node2):
      if not node2: return node1
      node2.next = node1
      node1.next = None
      return node2
    if not head or not head.next: return head
    dummy = head.next
    cur = ListNode()
    while head:
      if head and head.next: temp = head.next.next
      else: temp = None
      cur.next = swap(head, head.next)
      cur = cur.next.next
      head = temp
    return dummy
