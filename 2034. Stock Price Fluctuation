class StockPrice:

  def __init__(self):
    #Solution 1: O(1) / O(n)
    self.stockDict = defaultdict(int)
    self.maxTimestamp = 0
    self.maxHeap, self.minHeap = [], []

  def update(self, timestamp: int, price: int) -> None:
    #Solution 1: O(log n) / O(1)
    self.stockDict[timestamp] = price
    self.maxTimestamp = max(self.maxTimestamp, timestamp)
    heappush(self.maxHeap, (-price, timestamp)) #O(log n)
    heappush(self.minHeap, (price, timestamp)) #O(log n)

  def current(self) -> int:
    #Solution 1: O(1) / O(1)
    return self.stockDict[self.maxTimestamp]

  def maximum(self) -> int:
    #Solution 1: O(n log n) / O(1)
    price, timestamp = heappop(self.maxHeap)
    while self.stockDict[timestamp] != -price: #O(n)
      price, timestamp = heappop(self.maxHeap) #O(log n)
    heappush(self.maxHeap, (price, timestamp))
    return -price

  def minimum(self) -> int:
    #Solution 1: O(n log n) / O(1)
    price, timestamp = heappop(self.minHeap)
    while self.stockDict[timestamp] != price: #O(n)
      price, timestamp = heappop(self.minHeap) #O(log n)
    heappush(self.minHeap, (price, timestamp))
    return price
        
 

# Your StockPrice object will be instantiated and called as such:
# obj = StockPrice()
# obj.update(timestamp,price)
# param_2 = obj.current()
# param_3 = obj.maximum()
# param_4 = obj.minimum()
