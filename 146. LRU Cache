class ListNode:
    def __init__(self, key, value):
        self.key = key
        self.val = value
        self.next = None
        self.prev = None

class LRUCache:

    #Solution 1:
    def __init__(self, capacity: int): #O(1) / O(capacity)
        self.lru = dict()
        self.capacity = capacity

    def get(self, key: int) -> int: #O(1) / O(1)
        if key in self.lru:
            temp = self.lru.pop(key)
            self.lru[key] = temp
            return temp
        return -1

    def put(self, key: int, value: int) -> None: #O(1) / O(1)
        if key in self.lru:
            temp = self.lru.pop(key)
        self.lru[key] = value
        while len(self.lru) > self.capacity:
            del self.lru[list(self.lru.keys())[0]]

    #Solution 2:
    def __init__(self, capacity: int): #O(1) / O(capacity)
        self.head = ListNode(-1, -1)
        self.tail = ListNode(-1, -1)
        self.head.next = self.tail
        self.tail.prev = self.head #self.head <-> self.tail

        self.nodeDict = defaultdict(ListNode)
        self.capacity = capacity

    def add(self, node): #O(1) / O(1)
        prevEnd = self.tail.prev
        prevEnd.next = node
        node.prev = prevEnd
        node.next = self.tail
        self.tail.prev = node #prevEnd <-> node <-> self.tail

    def remove(self, node): #O(1) / O(1)
        node.prev.next = node.next
        node.next.prev = node.prev #node.prev <-> (node) <-> node.next

    def get(self, key: int) -> int: #O(1) / O(1)
        if key in self.nodeDict:
            node = self.nodeDict[key]
            self.remove(node)
            self.add(node)
            return node.val
        return -1

    def put(self, key: int, value: int) -> None: #O(1) / O(1)
        if key in self.nodeDict:
            oldNode = self.nodeDict[key]
            self.remove(oldNode)
        
        node = ListNode(key, value)
        self.nodeDict[key] = node
        self.add(node)

        while len(self.nodeDict) > self.capacity:
            delete = self.head.next
            self.remove(delete)
            del self.nodeDict[delete.key]


# Your LRUCache object will be instantiated and called as such:
# obj = LRUCache(capacity)
# param_1 = obj.get(key)
# obj.put(key,value)
