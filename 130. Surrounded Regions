class Solution:
  def solve(self, board: List[List[str]]) -> None:
    """
    Do not return anything, modify board in-place instead.
    """
    #Solution 1: O(r*c) / O(r*c), recursive stack
    def dfs(r, c):
      #mark all 'O' found by starting with r, c as '#'
      if 0 <= r < len(board) and 0 <= c < len(board[0]) and board[r][c] == 'O':
        board[r][c] = "#"
        dfs(r-1, c)
        dfs(r+1, c)
        dfs(r, c-1)
        dfs(r, c+1)
    
    #run DFS on only the borders of the board
    for i in range(len(board)):
      dfs(i, 0)
      dfs(i, len(board[0])-1)
    for j in range(1, len(board[0])-1):
      dfs(0, j)
      dfs(len(board)-1, j)
    
    #mark the '#'s ('O's that is connected to border 'O's) as 'O', and others as 'X'
    for r in range(len(board)):
      for c in range(len(board[0])):
        if board[r][c] == "O": board[r][c] = "X"
        if board[r][c] == "#": board[r][c] = "O"
