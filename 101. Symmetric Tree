# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right

class Solution:
  def isSymmetric(self, root: TreeNode) -> bool:
    #Solution 1 Recursive: O(n) / O(h)
    if not root: return
    def recursive(l, r):
      if not l and not r: return True
      if not l or not r: return False
      if l.val != r.val: return False
      return recursive(l.left, r.right) and recursive(l.right, r.left)
    return recursive(root.left, root.right)
  
    #Solution 2 Iterative: O(n) / O(h)
    if not root: return
    s = [(root.left, root.right)]
    while s:
      l, r = s.pop()
      if not l and not r: continue
      if not l or not r: return False
      if l.val != r.val: return False
      s.append((l.left, r.right))
      s.append((l.right, r.left))
    return True
