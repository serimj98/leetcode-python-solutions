class Solution:
    def nextPermutation(self, nums: List[int]) -> None:
        """
        Do not return anything, modify nums in-place instead.
        """
        #Solution 1: O(n) / O(1)
        def reverse(start, end):
            while start < end:
                nums[start], nums[end] = nums[end], nums[start]
                start += 1
                end -= 1

        #find two successive numbers a[i] and a[i-1] from right where a[i] > a[i-1]
        i = len(nums) - 1
        while i > 0 and nums[i-1] >= nums[i]:
            i -= 1
        #find rightmost point before continuous decrease, i.e. [3, 2, (3), 7, 5, 4, 3, 0]
        i -= 1
        
        #the whole sequence is decreasing and there is no larger lexicographical rearrangement
        if i == -1:
            reverse(0, len(nums) - 1)
            return

        j = len(nums) - 1
        while nums[i] >= nums[j]: #find rightmost element greater than i
            j -= 1
        nums[i], nums[j] = nums[j], nums[i] #i.e. [3, 2, (3), 7, 5, (4), 3, 0]
        #i.e. [3, 2, (4), <0, 3, (3), 5, 7>]
        reverse(i+1, len(nums)-1) #reverse descending elements after i
