class Solution:
  def letterCombinations(self, digits: str) -> List[str]:
    #Solution 1: O(n * 4^n) / O(n), n = length of digits
    comb = {'2':['a', 'b', 'c'], '3':['d', 'e', 'f'], '4':['g', 'h', 'i'],
            '5':['j', 'k', 'l'], '6':['m', 'n', 'o'], '7':['p', 'q', 'r', 's'],
            '8':['t', 'u', 'v'], '9':['w', 'x', 'y', 'z']}
    
    sol = []
    
    if not digits: return []
    
    def backtrack(path, digits):
      if len(digits) == 0:
        sol.append(path)
        return
      else:
        for i in comb[digits[0]]:
          backtrack(path+i, digits[1:])
    
    backtrack("", digits)
    return sol
