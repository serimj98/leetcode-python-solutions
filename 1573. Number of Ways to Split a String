class Solution:
    def numWays(self, s: str) -> int:
        #Solution 1: O(n) / O(1)
        splitNum = s.count("1")
        n = len(s) - 2
        #sum from 1 to n: n(n+1)/2
        if splitNum == 0: return (n*(n+1))//2 % (10**9+7)
        if splitNum % 3 != 0: return 0

        lCount = rCount = splitNum // 3
        l, r = 0, len(s) - 1
        for i, c in enumerate(s):
            if c == "1":
                lCount -= 1
                if lCount == 0:
                    l = i
                    break
        for j, c in enumerate(s[::-1]):
            if c == "1":
                rCount -= 1
                if rCount == 0:
                    r = len(s) - j - 1
                    break

        lCut, rCut = 1, 1
        for i in range(l + 1, r):
            if s[i] == "0": lCut += 1
            else: break
        for j in range(r - 1, l, -1):
            if s[j] == "0": rCut += 1
            else: break
        return lCut * rCut % (10**9+7) 
