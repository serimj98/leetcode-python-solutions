class Solution:
    def shortestPathBinaryMatrix(self, grid: List[List[int]]) -> int:
        #Solution 1: O(n^2) / O(n^2)
        n = len(grid)
        if grid[0][0] != 0 or grid[n-1][n-1] != 0: return -1
        q = deque()
        q.append((0, 0, 1))
        dirs = [(-1,-1), (-1,0), (-1,1), (0,-1), (0,1), (1,-1), (1,0), (1,1)]
        grid[0][0] = 1
        while q:
            x, y, path = q.popleft()
            if x == n - 1 and y == n - 1: return path
            for i, j in dirs:
                newX, newY = x+i, y+j
                if 0 <= newX < n and 0 <= newY < n and grid[newX][newY] == 0:
                    grid[newX][newY] = 1
                    q.append((newX, newY, path + 1))
        return -1

        #Solution 1: O(n^2) / O(n^2)
        n = len(grid)
        if grid[0][0] != 0 or grid[n-1][n-1] != 0: return -1
        q = deque()
        q.append((0, 0, 1))
        dirs = [(-1,-1), (-1,0), (-1,1), (0,-1), (0,1), (1,-1), (1,0), (1,1)]
        seen = set()
        seen.add((0, 0))
        while q:
            x, y, path = q.popleft()
            if x == n - 1 and y == n - 1: return path
            for i, j in dirs:
                newX, newY = x+i, y+j
                if 0 <= newX < n and 0 <= newY < n and grid[newX][newY] == 0:
                    if (newX, newY) not in seen:
                        seen.add((newX, newY))
                        q.append((newX, newY, path + 1))
        return -1
