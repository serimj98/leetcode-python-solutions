# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
  def hasCycle(self, head: ListNode) -> bool:
    #Solution 1: O(n) / O(n)
    seen = set()
    while head:
      if head in seen: return True
      seen.add(head)
      head = head.next
    return False
  
    #Solution 2: O(n) / O(1)
    if not head: return False
    slow, fast = head, head.next
    while fast and fast.next:
      if slow == fast: return True
      slow = slow.next
      fast = fast.next.next
    return False
